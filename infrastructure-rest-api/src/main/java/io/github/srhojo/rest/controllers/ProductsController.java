package io.github.srhojo.rest.controllers;

import io.github.srhojo.domain.models.Product;
import io.github.srhojo.domain.services.ProductServices;
import io.github.srhojo.rest.apis.ProductsApi;
import io.github.srhojo.rest.apis.domain.ProductRequest;
import io.github.srhojo.rest.apis.domain.ProductResponse;
import io.github.srhojo.rest.mappers.ProductRequestMapper;
import io.github.srhojo.rest.mappers.ProductResponseMapper;
import io.github.srhojo.utils.aop.CustomLogger;
import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.info.Contact;
import io.swagger.v3.oas.annotations.info.Info;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@OpenAPIDefinition(info = @Info(title = "Product Rest API",
        description = "API for manage products into data base",
        version = "2.0",
        contact = @Contact(
                name = "Javier",
                url = "https://github.com/srhojo"
        )
))
@CustomLogger
public class ProductsController implements ProductsApi {

    private final ProductServices productServices;
    private final ProductResponseMapper productResponseMapper;
    private final ProductRequestMapper productRequestMapper;

    public ProductsController(final ProductServices productServices, final ProductResponseMapper productResponseMapper,
                              final ProductRequestMapper productRequestMapper) {
        this.productServices = productServices;
        this.productResponseMapper = productResponseMapper;
        this.productRequestMapper = productRequestMapper;
    }

    @Override
    public List<ProductResponse> getProducts() {
        final List<Product> products = productServices.retrieveAll();
        return productResponseMapper.toOuter(products);
    }

    @Override
    @Operation(description = "Find a product by it's ID")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Product found", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ProductResponse.class))}),
            @ApiResponse(responseCode = "400", description = "Bad request", content = @Content),
            @ApiResponse(responseCode = "404", description = "Product not found", content = @Content)
    })
    public ProductResponse getById(final String id) {
        final Product product = productServices.retrieveById(id);
        return productResponseMapper.toOuter(product);
    }

    @Override
    @Operation(summary = "Create a Product", description = "Create a product with the information of the body. The Id will be autogenerated.")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Product created", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = ProductResponse.class))}),
            @ApiResponse(responseCode = "500", description = "An error occurred.", content = @Content)})

    public ProductResponse createProduct(final ProductRequest request) {
        final Product product = productServices.create(productRequestMapper.toInner(request));
        return productResponseMapper.toOuter(product);
    }

    @Override
    public ProductResponse updateProduct(final String id, final ProductRequest request) {
        final Product productToUpdate = productRequestMapper.toInner(request);
        return productResponseMapper.toOuter(productServices.update(id, productToUpdate));
    }

    @Override
    public void deleteProduct(final String id) {
        productServices.delete(id);
    }
}
